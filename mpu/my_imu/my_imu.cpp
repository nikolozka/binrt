////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the "Software"), to deal in
//  the Software without restriction, including without limitation the rights to use,
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
//  Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#include "RTIMULib.h"
#include <iostream>

int main()
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
	uint64_t originTimer;
    uint64_t now;

	bool set0 = 0;

	double s_0, x_0, y_0, z_0;

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

	//s_0 = x_0 = y_0 = z_0 = 0.0;


    RTIMU *imu = RTIMU::createIMU(settings);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.0);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(false);

    //  set up for rate timer

    rateTimer = displayTimer = originTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

	double s,x,y,z;

    while (1) {
        //  poll at the rate recommended by the IMU

        usleep(imu->IMUGetPollInterval() * 1000);

        while (imu->IMURead()) {
            RTIMU_DATA imuData = imu->getIMUData();
            sampleCount++;

            now = RTMath::currentUSecsSinceEpoch();

            //  display 10 times per second

		
		x = imuData.fusionPose.x() * RTMATH_RAD_TO_DEGREE;
		y = imuData.fusionPose.y() * RTMATH_RAD_TO_DEGREE;
		z = imuData.fusionPose.z() * RTMATH_RAD_TO_DEGREE;

		//x = imuData.fusionQPose.x(); //* RTMATH_RAD_TO_DEGREE;
		//y = imuData.fusionQPose.y(); //* RTMATH_RAD_TO_DEGREE;
		//z = imuData.fusionQPose.z(); //* RTMATH_RAD_TO_DEGREE;
		//s = imuData.fusionQPose.scalar();


		if(set0 == 1){
			x = x-x_0;
			y = y-y_0;
			z = z-z_0;
		}

            if ((now - displayTimer) > 10000) {                
		
		//printf("Sample rate %d: %s\r", sampleRate, RTMath::displayDegrees("", imuData.fusionPose));
		//std::cout << "\r" << "s: "<< s << ";   x: " << x << ";   y: " << y << ";   z: " << z << ";               " << std::flush;
		std::cout << "\r" << "x: " << x << ";   y: " << y << ";   z: " << z << ";               " << std::flush;
                displayTimer = now;
            }

		if((now - originTimer) > 1000000){
			if(set0 == 0){
				std::cout << "origin set!\n";
				x_0 = x;
				y_0 = y;
				z_0 = z;
				set0 = 1;
			}
		originTimer = now;
		}

            //  update rate every second

            if ((now - rateTimer) > 100000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
        }
    }
}

