////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the "Software"), to deal in
//  the Software without restriction, including without limitation the rights to use,
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
//  Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#include "RTIMULib.h"
#include <iostream>
#include <iomanip>
#include <sstream>

int main()
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
	uint64_t originTimer;
    uint64_t now;

	bool set0 = 0;

	double x_o1, y_o1, z_o1, x_o2, y_o2, z_o2;
	

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings = new RTIMUSettings("RTIMULib60501");
    RTIMUSettings *settings2 = new RTIMUSettings("RTIMULib60502");

	//s_0 = x_0 = y_0 = z_0 = 0.0;


    RTIMU *imu = RTIMU::createIMU(settings);
    RTIMU *imu2 = RTIMU::createIMU(settings2);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    if ((imu2 == NULL) || (imu2->IMUType() == RTIMU_TYPE_NULL)) {
        printf("Second IMU not found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();
    imu2->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.5);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(false);

    imu2->setSlerpPower(0.5);
    imu2->setGyroEnable(true);
    imu2->setAccelEnable(true);
    imu2->setCompassEnable(false);

    //  set up for rate timer

    rateTimer = displayTimer = originTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

	double x1,y1,z1,x2,y2,z2;

    while (1) {
        //  poll at the rate recommended by the IMU

	double interval = imu->IMUGetPollInterval();
	if (interval < imu2->IMUGetPollInterval()) interval = imu2->IMUGetPollInterval();

        usleep(interval * 1000);

        while (imu->IMURead() && imu2->IMURead()) {
            	RTIMU_DATA imuData = imu->getIMUData();
        	//RTVector3 imuData = imu->getCompass();

		RTIMU_DATA imuData2 = imu2->getIMUData();
            	sampleCount++;

            	now = RTMath::currentUSecsSinceEpoch();

            //  display 10 times per second

		x1 = imuData.fusionPose.x() * RTMATH_RAD_TO_DEGREE;
		y1 = imuData.fusionPose.y() * RTMATH_RAD_TO_DEGREE;
		z1 = imuData.fusionPose.z() * RTMATH_RAD_TO_DEGREE;

//		x1 = imuData.x();
//		y1 = imuData.y();
//		z1 = imuData.z();

		x2 = imuData2.fusionPose.x() * RTMATH_RAD_TO_DEGREE;
		y2 = imuData2.fusionPose.y() * RTMATH_RAD_TO_DEGREE;
		z2 = imuData2.fusionPose.z() * RTMATH_RAD_TO_DEGREE;

		//x = imuData.fusionQPose.x(); // * RTMATH_RAD_TO_DEGREE;
		//y = imuData.fusionQPose.y(); // * RTMATH_RAD_TO_DEGREE;
		//z = imuData.fusionQPose.z(); // * RTMATH_RAD_TO_DEGREE;
		//s = imuData.fusionQPose.scalar();

            if ((now - displayTimer) > 10000) {

		//printf("Sample rate %d: %s\r", sampleRate, RTMath::displayDegrees("", imuData.fusionPose));
		
		if(set0 == 1){

			x1 = round((x1-x_o1)*10)/10;
			y1 = round((y1-y_o1)*10)/10;
			z1 = round((z1-z_o1)*10)/10;

//			x1 = round((x1)*10)/10;
//			y1 = round((y1)*10)/10;
//			z1 = round((z1)*10)/10;

			x2 = round((x2-x_o2)*10)/10;
			y2 = round((y2-y_o2)*10)/10;
			z2 = round((z2-z_o2)*10)/10;
		}

		/*std::ostringstream strx1s;
		strx1s << x1;
		std::string strx1 = strx1s.str();

		std::ostringstream strx2s;
		strx2s << x2;
		std::string strx2 = strx2s.str();

		std::ostringstream stry1s;
		stry1s << y1;
		std::string stry1 = stry1s.str();

		std::ostringstream stry2s;
		stry2s << y2;
		std::string stry2 = stry2s.str();

		std::ostringstream strz1s;
		strz1s << z1;
		std::string strz1 = strz1s.str();

		std::ostringstream strz2s;
		strz2s << z2;
		std::string strz2 = strz2s.str();
*/
		//std::cout << "\r" << "s: "<< s << ";   x: " << x << ";   y: " << y << ";   z: " << z << ";               " << std::flush;
		size_t headerWidth = std::string("-1800.9").size();/*
    			std::string(strx2).size(),
    			std::string(stry1).size(),
			std::string(stry2).size(),
    			std::string(strz1).size(),
    			std::string(strz2).size()
		};*/

		std::cout << "  x_compass: " << std::setw(headerWidth) << x1 << ", x_accel: " << std::setw(headerWidth) << x2; 
		std::cout << "; y_compass: " << std::setw(headerWidth) << y1 << ", y_accel: " << std::setw(headerWidth) << y2; 
		std::cout << "; z_compass: " << std::setw(headerWidth) << z1 << ", z_accel: " << std::setw(headerWidth) << z2 << ";" << std::flush << "\r";
                displayTimer = now;
            }

		if((now - originTimer) > 1000000){
			if(set0 == 0){
				std::cout << "origin set!\n";
				x_o1 = x1;
				y_o1 = y1;
				z_o1 = z1;
				x_o2 = x2;
				y_o2 = y2;
				z_o2 = z2;

				set0 = 1;
			}
		originTimer = now;
		}

            //  update rate every second

            if ((now - rateTimer) > 100000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
        }
    }
}

